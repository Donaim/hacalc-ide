
// EQUALTITY

refl a a -> EQ a a // Using primitive equality test, for deep one use $equal condition. Returns proof of equality

eq? (EQ {xs}) -> True
refl ({xs} a) ({ys} b) -> refl a b | {xs} == {ys} // BUG: Need to check xs == ys explicitly

syml (EQ a b) a -> b
symr (EQ a b) b -> a

//EQ (refl a b) (refl c d) -> EQ a b

ind (EQ a b) (refl a b) -> EQ a b

// DEFINITIONS

add Zero    y -> y
add x    Zero -> x
add (Suc x) y -> Suc (add x y)
add x (Suc y) -> Suc (add x y)         // overlapping is OK

// INDUCTIVE HELPER
// f: left side of ==
// g: right side of ==
// b: base case (0, nil, ..)
// i: successor function
// checks the base case, then creates the proof of (EQ (f n) (g n)), then checks if (f n) (g n) == (f (i n)) (g (i n)), if yes, then proven
inductive-eq f g b i -> ind (EQ (f n) (g n)) (refl (f (i n)) (g (i n))) | $equal (f b) (g b)

// PROOFS

commutative@+fleft  x -> (add x z)
commutative@+fright x -> (add z x)

commutative@+ -> inductive-eq commutative@+fleft commutative@+fright Zero Suc

associative@+fleft  x -> (add x (add b c))
associative@+fright x -> (add (add x b) c)

associative@+ -> inductive-eq associative@+fleft associative@+fright Zero Suc
